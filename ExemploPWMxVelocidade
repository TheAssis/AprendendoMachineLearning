# primeiro iremos importar os dados

import os
import tarfile
from six.moves import urllib

FILE_TO_DOWNLOAD =  "PWMxVelocidade.csv"
DOWNLOAD_ROOT = "https://raw.githubusercontent.com/ect-info/ml/master/"
DATA_PATH = "dados/"
DATA_URL = DOWNLOAD_ROOT + DATA_PATH + FILE_TO_DOWNLOAD

def fetch_data(data_url=DATA_URL, data_path=DATA_PATH, file_to_download=FILE_TO_DOWNLOAD):
  if not os.path.isdir(data_path):
    os.makedirs(data_path)
  urllib.request.urlretrieve(data_url, data_path+"PWMxVelocidade.csv")
  
fetch_data()

# observando se o diretório datasets foi criado com sucesso 
!ls dados


#Aqui mostraremos os dados importados...

import pandas as pd

def load_data(data_path=DATA_PATH, file_to_download=FILE_TO_DOWNLOAD):
  csv_path = os.path.join(data_path,file_to_download)
  return pd.read_csv(csv_path)

pwm_e_velocidade = load_data()

print(pwm_e_velocidade)

pwm_e_velocidade.head()


# Separando os dados para a variável independente e para variável dependente
# A variável dependende X é o pwm.
# a variável independente (y) é a valocidade.

X = pwm_e_velocidade.iloc[:,:-1].values
y = pwm_e_velocidade.iloc[:, 1].values

print("Os valores de X: \n");
print(X);
print("E os valores de Y: \n");
print(y);


#Apenas uma descrição dos dados que possuímos
pwm_e_velocidade.describe()


#Agora iremos trabalhar com a regressão linear em si
# Based on source code by: Jaques Grobler
# License: BSD 3 clause


import matplotlib.pyplot as plt
import numpy as np
from sklearn import datasets, linear_model
from sklearn.metrics import mean_squared_error, r2_score


# agora iremos separar em treino e teste.
# Para o treino deixaremos todos os elementos menos os 12 primeiros
# Para o teste deixaremos os 12 primeiros elementos.

X_treino = X[:-7]
X_teste = X[-7:]

y_treino = y[:-7]
y_teste = y[-7:]


# Create linear regression object
regr = linear_model.LinearRegression()

# Train the model using the training sets
regr.fit(X_treino, y_treino)


# Make predictions using the testing set
y_pred = regr.predict(X_teste)


# The coefficients
print('Coefficients: \n', regr.coef_)
# The mean squared error
print("Mean squared error: %.2f"
      % mean_squared_error(y_teste, y_pred))
# Explained variance score: 1 is perfect prediction
print('Variance score: %.2f' % r2_score(y_teste, y_pred))


# Plot outputs
plt.scatter(X_teste, y_teste,  color='black')
plt.scatter(X_teste, y_pred, color='blue', linewidth=3)

plt.scatter(X_treino, y_treino,  color='green')


plt.xticks(())
plt.yticks(())
plt.ylabel('Velocidade')
plt.xlabel('PWM')
plt.show()
